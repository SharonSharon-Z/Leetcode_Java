class KthLargest {
    private final PriorityQueue<Integer> minHeap = new PriorityQueue<>();
    private final int k;   
    
    public KthLargest(int k, int[] nums) {
        this.k = k;
        for (int n : nums) {
            this.add(n);
            // if (minHeap.size() > k) {
            //     minHeap.poll();
            // }
        }
    }
//     // add() #1    
//     public int add(int val) {      
//         if (minHeap.size() < k) {
//             minHeap.offer(val);
//         } else if (minHeap.peek() < val){
//             minHeap.poll();
//             minHeap.offer(val);
//         }
//         return minHeap.peek();
//     }
    
    // add() #2 FASTER
    public int add(int val) {
        minHeap.offer(val); // use offer() to differentiate from add() in this class. add() will do the same thing. but not calling this add() we defined.
        if (minHeap.size() > k) {
            minHeap.poll();
        }        
        return minHeap.peek();
   }
    
    
}

/**
 * Your KthLargest object will be instantiated and called as such:
 * KthLargest obj = new KthLargest(k, nums);
 * int param_1 = obj.add(val);
 */
