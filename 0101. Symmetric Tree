/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    // recursive
//     public boolean isSymmetric(TreeNode root) {
        
//         return isMirror(root, root);  
//     }    
//     public boolean isMirror(TreeNode t1, TreeNode t2){
//             if (t1 == null && t2 == null) return true;
//             if (t1 == null || t2 == null) return false;
//             if (t1.val != t2.val) return false;
//             return isMirror(t1.left, t2.right) && isMirror(t1.right, t2.left);
//     }
    
    
    // iterative   
    public boolean isSymmetric(TreeNode root) {
        Queue<TreeNode> queue = new LinkedList<>();
        
        if (root == null) return true;
        queue.add(root.left);
        queue.add(root.right);
        
        while (!queue.isEmpty()) {
            TreeNode t1 = queue.poll();
            TreeNode t2 = queue.poll();
            
            if (t1 == null && t2 == null) return true;
            if (t1 == null || t2 == null) return false;
            if (t1.val != t2.val) return false;
            
            queue.add(t1.left);
            queue.add(t2.right);    
            queue.add(t1.right);    
            queue.add(t2.left);     
        }
        return true;
        
    }    
        

}
