class Solution {
//     // brute force _ vertical scanning O(n+s) (n: length of strs, s: total characters in all strings)
//     public String longestCommonPrefix(String[] strs) {
//         if (strs.length == 0 ) return "";
        
//         String coPre = "";
//         int maxLength = Integer.MAX_VALUE;
        
//         for (int n = 0; n < strs.length; n++) {
//             maxLength = Math.min(maxLength, strs[n].length());
//         }
        
//         int i = 0;
//         while (i < maxLength) {
//             char cur = strs[0].charAt(i);
            
//             for (int n = 1; n < strs.length; n++) {
//                 if (strs[n].charAt(i) != cur) return coPre;
//             }
//             coPre = strs[0].substring(0, i + 1);
//             i++;
//         }
//         return coPre;
        
//     }
    
    //divide and conquer
    public String longestCommonPrefix(String[] strs) {
        if (strs == null || strs.length == 0) return ""; 
        return lcp(strs, 0, strs.length - 1);
    }
    
    String lcp(String[] strs, int lt, int rt) {   /* divide*/
        if (lt == rt) {
            return strs[lt];
        } else {
            int mid = lt + (rt - lt) / 2;
            String lcpLeft = lcp(strs, lt, mid);
            String lcpRight = lcp(strs, mid+1, rt);
            return commonPrefix(lcpLeft, lcpRight);
        }
    }
    
    String commonPrefix(String left, String right) { /* conquer*/
        int min = Math.min(left.length(), right.length());
        for (int i = 0; i < min; i++) {
            if (left.charAt(i) != right.charAt(i)) return left.substring(0, i);
        }
        return left.substring(0, min);
    }
    
//     public String longestCommonPrefix(String[] strs) {
        
//     }
}
