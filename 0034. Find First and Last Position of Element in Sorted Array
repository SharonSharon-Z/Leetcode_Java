class Solution {
    public int[] searchRange(int[] nums, int target) {
        int low = 0; int high = nums.length - 1; int mid;
        int[] result = new int[] {-1, -1};
        // search first element
        while (low <= high) {
            mid = low + (high - low) / 2;
            if (nums[mid] == target) {
                if (mid == 0 || nums[mid] != nums[mid - 1]) {
                    result[0] = mid; break;
                } else {
                    high = mid - 1;
                } 
                    
            } else if (nums[mid] > target) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        
        if (result[0] == -1)  return result;
        // search last element
        low = 0; high = nums.length - 1; 
        while (low <= high) {
            mid = low + (high - low) / 2;
            if ( nums[mid] == target) {
                if (mid == nums.length - 1 || nums[mid] != nums[mid + 1]) {
                    result[1] = mid; break;
                } else {
                    low = mid + 1;
                }    
            } else if (nums[mid] > target) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        
        return result;
  
    }
}
