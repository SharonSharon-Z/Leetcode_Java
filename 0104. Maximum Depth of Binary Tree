/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    //RECURSIVE
    // public int maxDepth(TreeNode root) {
    //     // maxDepth(root) = 1 + max(maxDepth(root.left), maxDepth(root.right))
    //     TreeNode t = root;
    //     if (t == null) return 0;
    //     return 1 + Math.max(maxDepth(t.left), maxDepth(t.right));
    // }
    
    // ITERATIVE
    public int maxDepth(TreeNode root) {
        if (root == null) return 0;
        
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        int count = 0;
        
        while (!q.isEmpty()){
            int size = q.size();
            
            while (size > 0){
                TreeNode node = q.poll();
                if (node.left != null) q.add(node.left);
                if (node.right != null) q.add(node.right); 
                size --;
            }
            
            count ++;
        }
        
        return count;
    }
}
