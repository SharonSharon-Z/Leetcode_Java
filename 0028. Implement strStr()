// //solution1 with While
// class Solution {
//     public int strStr(String haystack, String needle) {
//         // edge case 1. input
//         if (needle.length() == 0) return 0;
//         if (haystack.length() == 0) return -1;
        
//         int result = -1, i = 0, j = 0;
        
//         while (i < haystack.length() && j < needle.length()) {
//             if (j == 0) {
//                 if (haystack.charAt(i) == needle.charAt(j)) {
//                     result = i;
//                     j++;
//                 } 
//                 i++;
//             } else {
//                 if (haystack.charAt(i) == needle.charAt(j)) {
//                     j++;
//                     i++;
//                 } else {
//                     j = 0;
//                     i = result + 1;
//                     result = -1;
//                 }
//             }              
//         }
        
//         if (j < needle.length()) result = -1;
        
//         return result;
//     }
// }

// // solution2 with For
// class Solution {
//     public int strStr(String haystack, String needle) {
//         // edge case 1. input
//         if (needle.length() == 0) return 0;
//         if (haystack.length() == 0) return -1;
        
//         for (int i = 0; i < haystack.length(); i++) {
//             if (i + needle.length() > haystack.length()) break;
            
//             for (int j = 0; j < needle.length(); j++) {
//                 if (haystack.charAt(i+j) != needle.charAt(j))
//                     break;
//                 if (j == needle.length()-1)
//                     return i;
//             }
//         }
        
//         return -1;

//     }
// }

// KMP 
class Solution {
    public int strStr(String haystack, String needle) {
        if (needle.length() == 0) return 0;        
        if (needle.length() > haystack.length()) return -1;
              
        int[] lps = computeLPSArray(needle);
        int i = 0, j = 0; 
        while (i < haystack.length()) { 
            if (needle.charAt(j) == haystack.charAt(i)) {i++; j++;} 

            if (j == needle.length()) {
                return i-j;
            } else if (i < haystack.length() && needle.charAt(j) != haystack.charAt(i)) { // mismatch after j matches
                // Do not match lps[0..lps[j-1]] characters, 
                // they will match anyway 
                if (j != 0) j = lps[j - 1]; 
                else i++; 
            } 
        }      
        return -1;  
    }
    
    private int[] computeLPSArray(String pat) { 
        int lps[] = new int[pat.length()]; //
        // length of the previous longest prefix suffix 
        int len = 0; 
        int i = 1; 
        // the loop calculates lps[i] for i = 1 
        while (i < pat.length()) { 
            if (pat.charAt(i) == pat.charAt(len)) { 
                lps[i] = len + 1; 
                i++; len++; 
            } else {// (pat[i] != pat[len]) 
                // This is tricky. Consider the example. 
                // AAACAAAA and i = 7. The idea is similar to search step. 
                if (len != 0) { 
                    len = lps[len - 1]; // Also, note that we do not increment i here 
                } else {// if (len == 0)   
                    i++; // lps[i] = len; 
                } 
            } 
        }
        return lps;
    } 
}
