class Solution {
    public boolean isValidSudoku(char[][] board) {
        // check row
        for (int row = 0; row < 9; row++){
            if (!rowIsValid(board, row)) return false;
        }

        // check col
        for (int col = 0; col < 9; col++) {
            if(!colIsValid(board, col)) return false;
        }
        
        // check square
        for (int i= 0; i<9; i = i+3) {
            for (int j = 0; j < 9; j = j+3) {
                if (!squareIsValid(board, i, j)) return false;
            }
        }
        return true;
    }
    
    private boolean rowIsValid(char[][] board, int row) {
        int[] nums= new int[10];
        for(int j = 0; j< 9; j++) {
            if (board[row][j]-'.' == 0) continue;
            else if ( 0<board[row][j]-'0' && board[row][j]-'0'<10) {
                if (nums[board[row][j]-'0'] == 0) nums[board[row][j]-'0'] = 1;
                else return false;
            } else return false;  
        }
        return true;
    }
    
    private boolean colIsValid(char[][] board, int col) {
        int[] nums= new int[10];
        for (int i = 0; i<9; i++) {
            if (board[i][col]-'.' == 0) continue;
            else if (0<board[i][col]-'0' && board[i][col]-'0' <10) {
                if (nums[board[i][col]-'0'] == 0) nums[board[i][col]-'0'] = 1;
                else return false;
            } else return false;
        }
        return true;
    }
    
    private boolean squareIsValid(char[][] board, int row, int col) {
        int[] nums= new int[10];
        // int count = 0;
        for (int i = row; i < row + 3; i++) {
            for (int j = col; j < col + 3; j++) {
                if (board[i][j]-'.' == 0) continue;
                else if ( 0<board[i][j] - '0' && board[i][j] - '0' < 10) {
                    if (nums[board[i][j] - '0'] == 0) {
                        nums[board[i][j] - '0'] = 1;
                    } else return false;
                } else return false;
            }
        }
        return true;
    }
}
