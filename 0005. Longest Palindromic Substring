// //solution1 brute force TLE
// class Solution {
//     public String longestPalindrome(String s) {
//         if (s.length() < 2) return s;

//         String result = s.substring(0,1);
//         for (int i = 0; i < s.length(); i++) {
//             for (int j = i + 1; j < s.length(); j++) {
//                 if (isPalindrome(s,i,j) && (j-i+1) > result.length()) {
//                     result = s.substring(i,j+1);
//                 } 
//             }
//         }
//         return result;
//     }

//     private boolean isPalindrome(String s, int start, int end) {
//         int i = start;
//         int j = end;
//         while (i < j) {
//             if (s.charAt(i) != s.charAt(j)) return false;
//             i += 1;
//             j -= 1;
//         }
//         return true;
//     }
// }

//solution2 brute force optimize PASS O(n3) 
// class Solution {
//     public String longestPalindrome(String s) {
//         if (s.length() < 2) return s;

//         String result = s.substring(0,1);

//         int j = 1;
//         int longest = 1;
//         for (int i = 0; i < s.length(); i++) {
//             if (j >= s.length()) break;
//             while (j < s.length()) {
//                 if (isPalindrome(s,i,j)) {
//                     result = s.substring(i,j+1);
//                     longest = j-i+1;
//                 } 
//                 j++;
//             }
//             j=i+longest;
//         }
//         return result;
//     }

//     private boolean isPalindrome(String s, int start, int end) {
//         int i = start;
//         int j = end;
//         while (i < j) {
//             if (s.charAt(i) != s.charAt(j)) return false;
//             i += 1;
//             j -= 1;
//         }
//         return true;
//     }
// }

//solution3 Dynamic Programming_using list of list to store data ; O(n2)29.38%
class Solution {
    public String longestPalindrome(String s) {
        int n = s.length();
        String result = "";
        
        boolean dp[][] = new boolean[n][n];
        
        for (int i = n-1; i >= 0; i--) {
            for (int j = i; j < n; j++) {
                dp[i][j] = s.charAt(i)==s.charAt(j) && (j-i + 1<=3 || dp[i+1][j-1]);
                
                if (dp[i][j] && (result == null || j-i+1 > result.length())) {
                    result = s.substring(i, j+1);
                }
            }
        }
        return result; 
    }
}


//solution4 expand from center
// class Solution {
//     public String longestPalindrome(String s) {
        
//     }
// }
