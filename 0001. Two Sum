class Solution {
    //Method1 brute force
    // public int[] twoSum(int[] nums, int target) {
    //     int[] result;
    //     for (int i = 0; i < nums.length; i++) {
    //         for (int j = i + 1; j < nums.length; j++){
    //             if (nums[i] + nums[j] == target) {
    //                 result = new int[] {i,j};
    //                 return result;
    //             }
    //         }
    //     }
    //     return result = null;
    // }
    
    // Method2 two-pass hashmap
//     public int[] twoSum(int[] nums, int target) {
//         int[] result;
//         HashMap<Integer, Integer> map = new HashMap<>();
        
//         for (int i = 0; i < nums.length; i++){
//             map.put(nums[i], i);
//         }
        
//         for (int i = 0; i < nums.length; i++){
//             if (map.containsKey(target - nums[i])) {
//                 if (map.get(target - nums[i]) != i) {
//                     return result = new int[] {i, map.get(target - nums[i])};
//                 }
//             }
//         }
//         return result = null;
//     }
    
    // Mehtod3 one-pass hashmap
    public int[] twoSum(int[] nums, int target) {
        int[] result;
        HashMap<Integer, Integer> map = new HashMap<>();
        
        for (int i = 0; i < nums.length; i++){
            if (map.containsKey(nums[i])) {
                return result = new int[] {i, map.get(nums[i])};
            }
            map.put(target - nums[i], i);
        }
        return result = null;
    }
    
}

