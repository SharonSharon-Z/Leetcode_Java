/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
// solution 1
// class Solution {
//     public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
//         if (l1 == null) return l2;
//         if (l2 == null) return l1;
        
//         ListNode p1 = l1;
//         ListNode p1prev = null;
//         ListNode p2 = l2;
//         ListNode p2prev = null;

//         ListNode result = null;
//         ListNode cur = null;
//         if (p1.val <= p2.val) {
//             result= p1;
//             p1prev = p1;
//             p1 = p1.next;
//             cur = p1prev;
//         } else {
//             result = p2;
//             p2prev = p2;
//             p2 = p2.next;
//             cur = p2prev;
//         }

//         while (p1 != null && p2 != null) {
//             if (cur == p1prev) {
//                 if (p1.val <= p2.val) {
//                     p1prev = p1;
//                     p1 = p1.next;
//                     cur = p1prev;
//                 } else {
//                     p1prev.next = p2;
//                     p2prev= p2;
//                     p2 = p2.next;
//                     cur = p2prev;
//                 }
//             } else {
//                if (p1.val <= p2.val) {
//                     p2prev.next = p1;
//                     p1prev = p1;
//                     p1 = p1.next;
//                     cur = p1prev;
//                } else {
//                     p2prev = p2;
//                     p2 = p2.next;
//                     cur = p2prev;
//                } 
//             } 
//         }
        
//         if (p1 == null) p1prev.next = p2;
//         else if (p2 == null) p2prev.next = p1;
        
//         return result; 
//     }
// }

//solution 2 BETTER
class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        if (l1 == null) return l2;
        if (l2 == null) return l1;
        
        ListNode p1 = l1;
        ListNode p2 = l2;

        ListNode result = null;
        ListNode cur = null;
        if (p1.val <= p2.val) {
            result= p1;
            cur = p1;
            p1 = p1.next;

        } else {
            result = p2;
            cur = p2;
            p2 = p2.next; 
        }

        while (p1 != null && p2 != null) {
            if (p1.val <= p2.val) {
                cur.next = p1;
                p1 = p1.next;
            } else {
                cur.next = p2;
                p2 = p2.next;
            }
            cur = cur.next; 
        }
        
        if (p1 == null) cur.next = p2;
        else if (p2 == null) cur.next = p1;
        
        return result; 
    }
}
